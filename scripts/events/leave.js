const { getTime, drive } = global.utils;

module.exports = {
  config: {
    name: "leave",
    version: "2.0",
    author: "rudeus ackerman",
    category: "events"
  },

  langs: {
    en: {
      session1: "matin",
      session2: "midi",
      session3: "apr√®s-midi",
      session4: "soir",
      // Messages quand l‚Äôutilisateur part de lui-m√™me
      leaveMessages: [
        "üíî {userName} a quitt√© le navire‚Ä¶ Il/elle n‚Äôa pas support√© nos b√™tises et a saut√© par-dessus bord ‚õµüêü",
        "üî• {userName} a disparu, consum√© par les flammes de l‚Äôoubli‚Ä¶",
        "üëª {userName} est parti‚Ä¶ mais son inutilit√© hantera encore ce groupe.",
        "ü™¶ Nom : {userName}\n√Çge : on s'en fout üßë‚Äçü¶Ø\nCause : trop inutile, consum√© par les flammes de l‚Äôenfer üçÅ",
        "ü§° {userName} n‚Äôa pas support√© nos blagues et a ragequit.\nAh‚Ä¶ suspense, qui sera le prochain ? üëÄ"
      ],
      // Messages quand il est expuls√©
      kickMessages: [
        "üö™ {userName} a √©t√© jet√© dehors comme un sac poubelle üóëÔ∏è",
        "üî• Rituel termin√© : {userName} a √©t√© sacrifi√© aux flammes üî•",
        "ü™¶ {userName} d√©clar√© officiellement mort socialement, expulsion r√©ussie ‚úÖ",
        "‚ö∞Ô∏è {userName} a √©t√© chass√© du groupe‚Ä¶ inutilit√© confirm√©e ü•¥",
        "üö´ {userName} expuls√© pour inactivit√© chronique. RIP üëã"
      ]
    }
  },

  onStart: async ({ threadsData, message, event, api, usersData, getLang }) => {
    if (event.logMessageType == "log:unsubscribe") {
      return async function () {
        const { threadID } = event;
        const threadData = await threadsData.get(threadID);
        if (!threadData.settings.sendLeaveMessage) return;

        const { leftParticipantFbId } = event.logMessageData;
        if (leftParticipantFbId == api.getCurrentUserID()) return;

        const hours = getTime("HH");
        const threadName = threadData.threadName;
        const userName = await usersData.getName(leftParticipantFbId);

        // D√©termine type : quitt√© ou kick
        const leftBySelf = leftParticipantFbId == event.author;
        const typeMessage = leftBySelf ? "a quitt√© le groupe" : "a √©t√© expuls√©";

        // Choix du message fun selon le type
        const messagesList = leftBySelf ? getLang("leaveMessages") : getLang("kickMessages");
        const funMessage = messagesList[Math.floor(Math.random() * messagesList.length)];

        // Remplace les variables dynamiques dans funMessage
        const funMsgParsed = funMessage.replace(/\{userName\}/g, userName);

        // D√©termine session
        const session = hours <= 10 ? getLang("session1") :
          hours <= 12 ? getLang("session2") :
            hours <= 18 ? getLang("session3") : getLang("session4");

        // Cadre final
        const finalMessage = `
‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
‚îÇ ‚ö∞Ô∏è  Avis de d√©c√®s du groupe ‚ö∞Ô∏è
‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
‚îÇ üë§ Nom : ${userName}            
‚îÇ üìå Groupe : ${threadName}       
‚îÇ üïí Heure : ${hours}h ${session}   
‚îÇ üìú Statut : ${typeMessage}      
‚îÇ                               
‚îÇ ${funMsgParsed}                  
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        `;

        const form = { body: finalMessage };

        if (threadData.data.leaveAttachment) {
          const files = threadData.data.leaveAttachment;
          const attachments = files.reduce((acc, file) => {
            acc.push(drive.getFile(file, "stream"));
            return acc;
          }, []);
          form.attachment = (await Promise.allSettled(attachments))
            .filter(({ status }) => status == "fulfilled")
            .map(({ value }) => value);
        }

        message.send(form);
      };
    }
  }
};
